Understanding of Browser Same-Origin Policy (why do we need it) and the implication of CORS

The same-origin policy is a critical security mechanism that restricts how a document or script loaded by one origin can interact with a resource from another origin.

It helps isolate potentially malicious documents, reducing possible attack vectors. For example, it prevents a malicious website on the Internet from running JS in a browser to read data from a third-party webmail service (which the user is signed into) or a company intranet (which is protected from direct access by the attacker by not having a public IP address) and relaying that data to the attacker.

A CORS misconfiguration can leave the application at a high-risk of compromise resulting in an impact on the confidentiality and integrity of data by allowing third-party sites to carry out privileged requests through your web site's authenticated users such as retrieving user setting information or saved payment card.

How to block cross-origin access
To prevent cross-origin writes, check an unguessable token in the request â€” known as a Cross-Site Request Forgery (CSRF) token. You must prevent cross-origin reads of pages that require this token.

To prevent cross-origin reads of a resource, ensure that it is not embeddable. It is often necessary to prevent embedding because embedding a resource always leaks some information about it.


To prevent cross-origin embeds, ensure that your resource cannot be interpreted as one of the embeddable formats listed above. Browsers may not respect the Content-Type header. For example, if you point a <script> tag at an HTML document, the browser will try to parse the HTML as JavaScript. When your resource is not an entry point to your site, you can also use a CSRF token to prevent embedding.

Understanding of password storage if it comes up (https://steveshank.com/cgi-bin/article.pl?aid=429)
Using a hash table, a hashing function takes whatever you enter, regardless of length, and runs it through a formula that produces a fixed length set of characters that appear random. It is impossible to take that hash and reverse the process to find the password.
Think of it like putting fresh roasted coffee beans into a coffee grinder. You turn the crank (or push a button) and the beans are chopped into many tiny particles. There is no way to put the particles back together and end up with the original beans. 

When passwords are hashed properly, they not only use your password, but mix in some other variable like your username as well. This is called, salting the hash. This prevents people from compiling a huge table of passwords and their hashed equivalents, and then doing a reverse lookup on the hash if they manage to steal the hashed passwords.

hash table (hash map) is a data structure that implements an associative array abstract data type, a structure that can map keys to values. A hash table uses a hash function to compute an index, also called a hash code, into an array of buckets or slots, from which the desired value can be found.
